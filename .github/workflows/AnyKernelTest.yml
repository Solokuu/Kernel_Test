name: AnyKernelTest

on:
  push:
  workflow_dispatch:
  repository_dispatch:
    types: [AnyKernelTest]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["LineageOS-20"]

    env:
      VERSION: ${{ matrix.version }}
      ARCH: arm64
      KBUILD_BUILD_HOST: Github-Action
      KBUILD_BUILD_USER: "AnyKernelTest"
      CLANG_PATH: ${{ github.workspace }}/kernel/clang/bin
      # Dodane domyślne wartości dla zmiennych ZIP
      ZIP_NO_KSU: "${{ matrix.version }}-NoKernelSU.zip"
      ZIP_KSU: "${{ matrix.version }}-KernelSU.zip"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip jq libarchive-tools zip lib32z1-dev libbz2-dev pngcrush python-is-python3 libsdl1.2-dev autoconf libxml2-utils wget pkg-config unzip gawk imagemagick libc6-dev gcc-multilib patchelf gzip clang subversion optipng device-tree-compiler ccache gcc lzip rsync automake fastboot patch pngquant expat lzop libswitch-perl make libcap-dev adb libxml2 bison zlib1g-dev libtool squashfs-tools gperf flex libtinfo6 minicom liblz4-tool libmpfr-dev libssl-dev build-essential cmake g++-multilib re2c axel maven xsltproc g++ git git-lfs policycoreutils unrar ncurses-dev tree bc curl software-properties-common tar texinfo schedtool libc6-dev-i386 apt-utils
          sudo pip3 install yq

      - name: Set up ccache
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "USE_CCACHE=1" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          mkdir -p ${{ github.workspace }}/.ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Prepare directories
        run: |
          mkdir -p ${{ github.workspace }}/outw/{true,false}
          mkdir -p AnyKernel3

      - name: Clone AnyKernel3
        run: |
          chmod +x anykernelTest.sh
          ./anykernelTest.sh

      - name: Build kernels
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Make AnyKernel3 zips
        run: |
          chmod +x makezip.sh
          ./makezip.sh

      - name: Verify created files
        run: |
          ls -la ${{ github.workspace }}
          [ -f "${{ github.workspace }}/${{ env.ZIP_NO_KSU }}" ] || { echo "Missing ${{ env.ZIP_NO_KSU }}"; exit 1; }

      - name: Extract info for release
        run: |
          chmod +x extract.sh
          ./extract.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-builds
          path: |
            ${{ github.workspace }}/${{ env.ZIP_NO_KSU }}

      - name: Create release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/${{ env.ZIP_NO_KSU }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: KernelSU Release - ${{ env.VERSION }}
          tag_name: build-${{ github.run_number }}
          body: |
            **Kernel Information:**
            - Version: ${{ env.VERSION }}
            - KernelSU Version: ${{ env.KERNELSU_VERSION }}

            **Installation Instructions:**
            1. Download the appropriate zip file
            2. Flash in custom recovery
            3. Reboot and enjoy

            <details>
              <summary>Build Details</summary>
              ```
              ${{ env.buildsettings }}
              ```
            </details>
          draft: false
          prerelease: false
