name: Kernel Bez SU

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["LineageOS-20"]

    env:
      VERSION: ${{ matrix.version }}
      ARCH: arm64
      KBUILD_BUILD_HOST: Github-Action
      KBUILD_BUILD_USER: "Kernel_Builder"
      CLANG_PATH: ${{ github.workspace }}/kernel/clang/bin
      DRIVERS_CONFIG: "${{ github.workspace }}/drivers.cfg"
      KERNEL_SRC: "${{ github.workspace }}/kernel"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip jq
          sudo pip3 install pyyaml

      - name: Set up ccache
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "USE_CCACHE=1" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Clone clang and kernel sources
        run: |
          chmod +x clone.sh
          ./clone.sh

      - name: Add Clang to PATH
        run: |
          echo "${CLANG_PATH}" >> $GITHUB_PATH

      - name: Set KERNELSU environment variable to true
        run: echo "KERNELSU=true" >> $GITHUB_ENV

      - name: Set KERNELSU_VERSION environment variable
        run: echo "KERNELSU_VERSION=$(cat ksu_version.txt)" >> $GITHUB_ENV

      - name: Add KernelSU support to kernel
        run: |
          cd $KERNEL_SRC
          chmod +x kernelSU.sh
          ./kernelSU.sh

      - name: Build kernel with drivers
        run: |
          cd $KERNEL_SRC
          chmod +x build.sh
          ./build.sh

      - name: Make a release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            $KERNEL_SRC/out/arch/arm64/boot/Image.gz-dtb
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Kernel Release - ${{ env.VERSION }}
          tag_name: ${{ github.run_id }}
          body: |
             **Info:**
              - Kernel Version: ${{ env.VERSION }}
              - KernelSU Version: ${{ env.KERNELSU_VERSION }}
              - Included Drivers: $(if [ -f "$DRIVERS_CONFIG" ]; then cat "$DRIVERS_CONFIG"; else echo "None"; fi)
              
              **Installation:**
              - Place Image.gz-dtb to /boot
          draft: false
          prerelease: false
