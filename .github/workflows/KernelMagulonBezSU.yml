name: Kernel with Drivers v2

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["LineageOS-20"]

    env:
      VERSION: ${{ matrix.version }}
      ARCH: arm64
      KBUILD_BUILD_HOST: Github-Action
      KBUILD_BUILD_USER: "Kernel_Builder"
      CLANG_PATH: ${{ github.workspace }}/kernel/clang/bin
      CONFIG_FILE: "${{ github.workspace }}/kernel/arch/arm64/configs/your_defconfig"
      DRIVERS_CONFIG: "${{ github.workspace }}/drivers.cfg"
      KERNEL_SRC: "${{ github.workspace }}/kernel"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip jq libarchive-tools zip lib32z1-dev libbz2-dev pngcrush python-is-python3 libsdl1.2-dev autoconf libxml2-utils wget pkg-config unzip gawk imagemagick libc6-dev gcc-multilib patchelf gzip clang subversion optipng device-tree-compiler ccache gcc lzip rsync automake fastboot patch pngquant expat lzop libswitch-perl make libcap-dev adb libxml2 bison zlib1g-dev libtool squashfs-tools gperf flex libtinfo6 minicom liblz4-tool libmpfr-dev libssl-dev build-essential cmake g++-multilib re2c axel maven xsltproc g++ git git-lfs policycoreutils unrar ncurses-dev tree bc curl software-properties-common tar texinfo schedtool libc6-dev-i386 apt-utils
          sudo pip3 install yq

      - name: Set up ccache
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "USE_CCACHE=1" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Clone clang and kernel sources
        run: |
          chmod +x clone.sh
          ./clone.sh

      - name: Add Clang to PATH
        run: |
          echo "${CLANG_PATH}" >> $GITHUB_PATH

      # Prepare kernel config tools
            # Prepare kernel config tools
      - name: Build kernel config tools
        run: |
          cd $KERNEL_SRC
          
          # Build the kconfig tools
          make -C scripts/kconfig clean
          make -C scripts/kconfig
          chmod +x scripts/kconfig/conf
          
          # Create symlink for easy access
          ln -sf $KERNEL_SRC/scripts/kconfig/conf $KERNEL_SRC/scripts/config

      # Kernel configuration modifications from drivers.cfg
      - name: Apply drivers configuration
        run: |
          cd $KERNEL_SRC
          
          if [ -f "$DRIVERS_CONFIG" ]; then
            echo "Applying drivers configuration from $DRIVERS_CONFIG"
            
            # Make backup of original config
            cp $CONFIG_FILE ${CONFIG_FILE}.bak
            
            # Process each line in drivers.cfg
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              
              config_key=$(echo "$line" | cut -d'=' -f1 | xargs)
              config_value=$(echo "$line" | cut -d'=' -f2 | xargs)
              
              echo "Processing: $config_key=$config_value"
              
              # Apply the config option using the proper tool
              case "$config_value" in
                "y")
                  scripts/kconfig/conf --olddefconfig $CONFIG_FILE --enable $config_key
                  ;;
                "n")
                  scripts/kconfig/conf --olddefconfig $CONFIG_FILE --disable $config_key
                  ;;
                "m")
                  scripts/kconfig/conf --olddefconfig $CONFIG_FILE --module $config_key
                  ;;
                *)
                  scripts/kconfig/conf --olddefconfig $CONFIG_FILE --set-val $config_key $config_value
                  ;;
              esac
            done < "$DRIVERS_CONFIG"
            
            echo "Config changes diff:"
            diff -u ${CONFIG_FILE}.bak $CONFIG_FILE || true
          else
            echo "No drivers.cfg file found, skipping driver configuration"
          fi

      # Rest of your workflow...
      - name: Set KERNELSU environment variable
        run: echo "KERNELSU=true" >> $GITHUB_ENV

      - name: Set KERNELSU_VERSION environment variable
        run: echo "KERNELSU_VERSION=$(cat ksu_version.txt)" >> $GITHUB_ENV

      - name: Add KernelSU support to kernel
        run: |
          chmod +x kernelSU.sh
          ./kernelSU.sh

      - name: Compile kernel
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Package kernel artifacts
        run: |
          mkdir -p ${{ github.workspace }}/output
          KERNEL_NAME="${VERSION}-$(date +%Y%m%d)"
          
          cp ${{ github.workspace }}/kernel/out/arch/arm64/boot/Image.gz-dtb ${{ github.workspace }}/output/
          
          if [ -d "${{ github.workspace }}/kernel/out/modules" ]; then
            tar -czvf ${{ github.workspace }}/output/modules-${KERNEL_NAME}.tar.gz -C ${{ github.workspace }}/kernel/out/modules .
          fi
          
          if [ -f "$DRIVERS_CONFIG" ]; then
            cp "$DRIVERS_CONFIG" ${{ github.workspace }}/output/
          fi

      - name: Make a release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            output/Image.gz-dtb
            output/modules-*.tar.gz
            output/drivers.cfg
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Kernel ${{ env.VERSION }} - $(date +%Y%m%d)
          tag_name: build-$(date +%Y%m%d-%H%M)
          body: |
            **Custom Kernel Build**
            
            **Build Info:**
            - Version: ${{ env.VERSION }}
            - KernelSU: ${{ env.KERNELSU_VERSION }}
            - Drivers Config: $(if [ -f "$DRIVERS_CONFIG" ]; then echo "Applied"; else echo "None"; fi)
            
            **Installation:**
            1. Flash Image.gz-dtb to your boot partition
            2. Install modules (if included)
            
            **Included Drivers:**
            $(if [ -f "$DRIVERS_CONFIG" ]; then cat "$DRIVERS_CONFIG"; else echo "No custom drivers configured"; fi)
